// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user

import (
	"axia/thrift/exception"
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = exception.GoUnusedProtection__
var GoUnusedProtection__ int

type Gender int64

const (
	Gender_MALE   Gender = 0
	Gender_FEMALE Gender = 1
)

func (p Gender) String() string {
	switch p {
	case Gender_MALE:
		return "MALE"
	case Gender_FEMALE:
		return "FEMALE"
	}
	return "<UNSET>"
}

func GenderFromString(s string) (Gender, error) {
	switch s {
	case "MALE":
		return Gender_MALE, nil
	case "FEMALE":
		return Gender_FEMALE, nil
	}
	return Gender(0), fmt.Errorf("not a valid Gender string")
}

func GenderPtr(v Gender) *Gender { return &v }

func (p Gender) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Gender) UnmarshalText(text []byte) error {
	q, err := GenderFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Timestamp string

func TimestampPtr(v Timestamp) *Timestamp { return &v }

type UUID string

func UUIDPtr(v UUID) *UUID { return &v }

// Attributes:
//  - ID
//  - IdentityId
//  - Firstname
//  - Middlename
//  - Lastname
//  - Birthplace
//  - Birthdate
//  - Gender
//  - Nationality
//  - VillageId
//  - Address
//  - Phone
//  - Email
//  - Religion
//  - Profession
//  - Active
//  - Created
//  - Updated
type Identity struct {
	ID          *UUID     `thrift:"id,1" json:"id,omitempty"`
	IdentityId  string    `thrift:"identityId,2,required" json:"identityId"`
	Firstname   string    `thrift:"firstname,3,required" json:"firstname"`
	Middlename  *string   `thrift:"middlename,4" json:"middlename,omitempty"`
	Lastname    *string   `thrift:"lastname,5" json:"lastname,omitempty"`
	Birthplace  string    `thrift:"birthplace,6,required" json:"birthplace"`
	Birthdate   Timestamp `thrift:"birthdate,7,required" json:"birthdate"`
	Gender      Gender    `thrift:"gender,8,required" json:"gender"`
	Nationality string    `thrift:"nationality,9,required" json:"nationality"`
	VillageId   UUID      `thrift:"villageId,10,required" json:"villageId"`
	Address     string    `thrift:"address,11,required" json:"address"`
	Phone       string    `thrift:"phone,12,required" json:"phone"`
	Email       *string   `thrift:"email,13" json:"email,omitempty"`
	Religion    UUID      `thrift:"religion,14,required" json:"religion"`
	Profession  string    `thrift:"profession,15,required" json:"profession"`
	Active      bool      `thrift:"active,16,required" json:"active"`
	Created     Timestamp `thrift:"created,17,required" json:"created"`
	Updated     Timestamp `thrift:"updated,18,required" json:"updated"`
}

func NewIdentity() *Identity {
	return &Identity{}
}

var Identity_ID_DEFAULT UUID

func (p *Identity) GetID() UUID {
	if !p.IsSetID() {
		return Identity_ID_DEFAULT
	}
	return *p.ID
}

func (p *Identity) GetIdentityId() string {
	return p.IdentityId
}

func (p *Identity) GetFirstname() string {
	return p.Firstname
}

var Identity_Middlename_DEFAULT string

func (p *Identity) GetMiddlename() string {
	if !p.IsSetMiddlename() {
		return Identity_Middlename_DEFAULT
	}
	return *p.Middlename
}

var Identity_Lastname_DEFAULT string

func (p *Identity) GetLastname() string {
	if !p.IsSetLastname() {
		return Identity_Lastname_DEFAULT
	}
	return *p.Lastname
}

func (p *Identity) GetBirthplace() string {
	return p.Birthplace
}

func (p *Identity) GetBirthdate() Timestamp {
	return p.Birthdate
}

func (p *Identity) GetGender() Gender {
	return p.Gender
}

func (p *Identity) GetNationality() string {
	return p.Nationality
}

func (p *Identity) GetVillageId() UUID {
	return p.VillageId
}

func (p *Identity) GetAddress() string {
	return p.Address
}

func (p *Identity) GetPhone() string {
	return p.Phone
}

var Identity_Email_DEFAULT string

func (p *Identity) GetEmail() string {
	if !p.IsSetEmail() {
		return Identity_Email_DEFAULT
	}
	return *p.Email
}

func (p *Identity) GetReligion() UUID {
	return p.Religion
}

func (p *Identity) GetProfession() string {
	return p.Profession
}

func (p *Identity) GetActive() bool {
	return p.Active
}

func (p *Identity) GetCreated() Timestamp {
	return p.Created
}

func (p *Identity) GetUpdated() Timestamp {
	return p.Updated
}
func (p *Identity) IsSetID() bool {
	return p.ID != nil
}

func (p *Identity) IsSetMiddlename() bool {
	return p.Middlename != nil
}

func (p *Identity) IsSetLastname() bool {
	return p.Lastname != nil
}

func (p *Identity) IsSetEmail() bool {
	return p.Email != nil
}

func (p *Identity) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIdentityId bool = false
	var issetFirstname bool = false
	var issetBirthplace bool = false
	var issetBirthdate bool = false
	var issetGender bool = false
	var issetNationality bool = false
	var issetVillageId bool = false
	var issetAddress bool = false
	var issetPhone bool = false
	var issetReligion bool = false
	var issetProfession bool = false
	var issetActive bool = false
	var issetCreated bool = false
	var issetUpdated bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetIdentityId = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetFirstname = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetBirthplace = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetBirthdate = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetGender = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetNationality = true
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
			issetVillageId = true
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
			issetAddress = true
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
			issetPhone = true
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
			issetReligion = true
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
			issetProfession = true
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
			issetActive = true
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
			issetCreated = true
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
			issetUpdated = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIdentityId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IdentityId is not set"))
	}
	if !issetFirstname {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Firstname is not set"))
	}
	if !issetBirthplace {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Birthplace is not set"))
	}
	if !issetBirthdate {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Birthdate is not set"))
	}
	if !issetGender {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gender is not set"))
	}
	if !issetNationality {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Nationality is not set"))
	}
	if !issetVillageId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VillageId is not set"))
	}
	if !issetAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Address is not set"))
	}
	if !issetPhone {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Phone is not set"))
	}
	if !issetReligion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Religion is not set"))
	}
	if !issetProfession {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Profession is not set"))
	}
	if !issetActive {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Active is not set"))
	}
	if !issetCreated {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Created is not set"))
	}
	if !issetUpdated {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Updated is not set"))
	}
	return nil
}

func (p *Identity) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := UUID(v)
		p.ID = &temp
	}
	return nil
}

func (p *Identity) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IdentityId = v
	}
	return nil
}

func (p *Identity) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Firstname = v
	}
	return nil
}

func (p *Identity) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Middlename = &v
	}
	return nil
}

func (p *Identity) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Lastname = &v
	}
	return nil
}

func (p *Identity) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Birthplace = v
	}
	return nil
}

func (p *Identity) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := Timestamp(v)
		p.Birthdate = temp
	}
	return nil
}

func (p *Identity) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := Gender(v)
		p.Gender = temp
	}
	return nil
}

func (p *Identity) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Nationality = v
	}
	return nil
}

func (p *Identity) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := UUID(v)
		p.VillageId = temp
	}
	return nil
}

func (p *Identity) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Identity) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Identity) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *Identity) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := UUID(v)
		p.Religion = temp
	}
	return nil
}

func (p *Identity) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Profession = v
	}
	return nil
}

func (p *Identity) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Active = v
	}
	return nil
}

func (p *Identity) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := Timestamp(v)
		p.Created = temp
	}
	return nil
}

func (p *Identity) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		temp := Timestamp(v)
		p.Updated = temp
	}
	return nil
}

func (p *Identity) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Identity"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Identity) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *Identity) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityId: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdentityId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityId: ", p), err)
	}
	return err
}

func (p *Identity) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("firstname", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:firstname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Firstname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.firstname (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:firstname: ", p), err)
	}
	return err
}

func (p *Identity) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMiddlename() {
		if err := oprot.WriteFieldBegin("middlename", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:middlename: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Middlename)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.middlename (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:middlename: ", p), err)
		}
	}
	return err
}

func (p *Identity) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastname() {
		if err := oprot.WriteFieldBegin("lastname", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Lastname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastname (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastname: ", p), err)
		}
	}
	return err
}

func (p *Identity) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("birthplace", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:birthplace: ", p), err)
	}
	if err := oprot.WriteString(string(p.Birthplace)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.birthplace (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:birthplace: ", p), err)
	}
	return err
}

func (p *Identity) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("birthdate", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:birthdate: ", p), err)
	}
	if err := oprot.WriteString(string(p.Birthdate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.birthdate (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:birthdate: ", p), err)
	}
	return err
}

func (p *Identity) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gender", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:gender: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gender (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:gender: ", p), err)
	}
	return err
}

func (p *Identity) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nationality", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:nationality: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nationality)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nationality (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:nationality: ", p), err)
	}
	return err
}

func (p *Identity) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("villageId", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:villageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.VillageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.villageId (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:villageId: ", p), err)
	}
	return err
}

func (p *Identity) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.address (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:address: ", p), err)
	}
	return err
}

func (p *Identity) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:phone: ", p), err)
	}
	return err
}

func (p *Identity) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.email (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:email: ", p), err)
		}
	}
	return err
}

func (p *Identity) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("religion", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:religion: ", p), err)
	}
	if err := oprot.WriteString(string(p.Religion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.religion (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:religion: ", p), err)
	}
	return err
}

func (p *Identity) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profession", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:profession: ", p), err)
	}
	if err := oprot.WriteString(string(p.Profession)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.profession (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:profession: ", p), err)
	}
	return err
}

func (p *Identity) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("active", thrift.BOOL, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:active: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Active)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.active (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:active: ", p), err)
	}
	return err
}

func (p *Identity) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("created", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:created: ", p), err)
	}
	if err := oprot.WriteString(string(p.Created)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.created (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:created: ", p), err)
	}
	return err
}

func (p *Identity) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updated", thrift.STRING, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:updated: ", p), err)
	}
	if err := oprot.WriteString(string(p.Updated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updated (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:updated: ", p), err)
	}
	return err
}

func (p *Identity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Identity(%+v)", *p)
}
