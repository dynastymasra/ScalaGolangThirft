// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user

import (
	"axia/thrift/exception"
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = exception.GoUnusedProtection__

type UserService interface {
	Ping() (r string, err error)
	// Parameters:
	//  - Identity
	Create(identity *Identity) (r *Identity, err error)
	// Parameters:
	//  - ID
	//  - Identity
	Update(id UUID, identity *Identity) (r *Identity, err error)
	// Parameters:
	//  - ID
	Remove(id UUID) (err error)
	// Parameters:
	//  - ID
	Get(id UUID) (r *Identity, err error)
	GetAll() (r []*Identity, err error)
}

type UserServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
	return &UserServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
	return &UserServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *UserServiceClient) Ping() (r string, err error) {
	if err = p.sendPing(); err != nil {
		return
	}
	return p.recvPing()
}

func (p *UserServiceClient) sendPing() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserServicePingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserServiceClient) recvPing() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ping" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
		return
	}
	result := UserServicePingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Identity
func (p *UserServiceClient) Create(identity *Identity) (r *Identity, err error) {
	if err = p.sendCreate(identity); err != nil {
		return
	}
	return p.recvCreate()
}

func (p *UserServiceClient) sendCreate(identity *Identity) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserServiceCreateArgs{
		Identity: identity,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserServiceClient) recvCreate() (value *Identity, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create failed: invalid message type")
		return
	}
	result := UserServiceCreateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.AlreadyRegister != nil {
		err = result.AlreadyRegister
		return
	} else if result.Forbidden != nil {
		err = result.Forbidden
		return
	} else if result.Validation != nil {
		err = result.Validation
		return
	} else if result.Common != nil {
		err = result.Common
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Identity
func (p *UserServiceClient) Update(id UUID, identity *Identity) (r *Identity, err error) {
	if err = p.sendUpdate(id, identity); err != nil {
		return
	}
	return p.recvUpdate()
}

func (p *UserServiceClient) sendUpdate(id UUID, identity *Identity) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("update", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserServiceUpdateArgs{
		ID:       id,
		Identity: identity,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserServiceClient) recvUpdate() (value *Identity, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "update" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "update failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "update failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "update failed: invalid message type")
		return
	}
	result := UserServiceUpdateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserNotFound != nil {
		err = result.UserNotFound
		return
	} else if result.Forbidden != nil {
		err = result.Forbidden
		return
	} else if result.Validation != nil {
		err = result.Validation
		return
	} else if result.Common != nil {
		err = result.Common
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *UserServiceClient) Remove(id UUID) (err error) {
	if err = p.sendRemove(id); err != nil {
		return
	}
	return p.recvRemove()
}

func (p *UserServiceClient) sendRemove(id UUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserServiceRemoveArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserServiceClient) recvRemove() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "remove" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "remove failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "remove failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remove failed: invalid message type")
		return
	}
	result := UserServiceRemoveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserNotFound != nil {
		err = result.UserNotFound
		return
	} else if result.Forbidden != nil {
		err = result.Forbidden
		return
	} else if result.Common != nil {
		err = result.Common
		return
	}
	return
}

// Parameters:
//  - ID
func (p *UserServiceClient) Get(id UUID) (r *Identity, err error) {
	if err = p.sendGet(id); err != nil {
		return
	}
	return p.recvGet()
}

func (p *UserServiceClient) sendGet(id UUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserServiceGetArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserServiceClient) recvGet() (value *Identity, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
		return
	}
	result := UserServiceGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserNotFound != nil {
		err = result.UserNotFound
		return
	} else if result.Forbidden != nil {
		err = result.Forbidden
		return
	} else if result.Common != nil {
		err = result.Common
		return
	}
	value = result.GetSuccess()
	return
}

func (p *UserServiceClient) GetAll() (r []*Identity, err error) {
	if err = p.sendGetAll(); err != nil {
		return
	}
	return p.recvGetAll()
}

func (p *UserServiceClient) sendGetAll() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAll", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserServiceGetAllArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserServiceClient) recvGetAll() (value []*Identity, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAll" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAll failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAll failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAll failed: invalid message type")
		return
	}
	result := UserServiceGetAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Forbidden != nil {
		err = result.Forbidden
		return
	} else if result.Common != nil {
		err = result.Common
		return
	}
	value = result.GetSuccess()
	return
}

type UserServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserService
}

func (p *UserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {

	self12 := &UserServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self12.processorMap["ping"] = &userServiceProcessorPing{handler: handler}
	self12.processorMap["create"] = &userServiceProcessorCreate{handler: handler}
	self12.processorMap["update"] = &userServiceProcessorUpdate{handler: handler}
	self12.processorMap["remove"] = &userServiceProcessorRemove{handler: handler}
	self12.processorMap["get"] = &userServiceProcessorGet{handler: handler}
	self12.processorMap["getAll"] = &userServiceProcessorGetAll{handler: handler}
	return self12
}

func (p *UserServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x13.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x13

}

type userServiceProcessorPing struct {
	handler UserService
}

func (p *userServiceProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServicePingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserServicePingResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Ping(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorCreate struct {
	handler UserService
}

func (p *userServiceProcessorCreate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceCreateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserServiceCreateResult{}
	var retval *Identity
	var err2 error
	if retval, err2 = p.handler.Create(args.Identity); err2 != nil {
		switch v := err2.(type) {
		case *exception.UserAlreadyRegisterException:
			result.AlreadyRegister = v
		case *exception.ForbiddenException:
			result.Forbidden = v
		case *exception.ValidationException:
			result.Validation = v
		case *exception.CommonException:
			result.Common = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create: "+err2.Error())
			oprot.WriteMessageBegin("create", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("create", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUpdate struct {
	handler UserService
}

func (p *userServiceProcessorUpdate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUpdateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("update", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserServiceUpdateResult{}
	var retval *Identity
	var err2 error
	if retval, err2 = p.handler.Update(args.ID, args.Identity); err2 != nil {
		switch v := err2.(type) {
		case *exception.UserNotFoundException:
			result.UserNotFound = v
		case *exception.ForbiddenException:
			result.Forbidden = v
		case *exception.ValidationException:
			result.Validation = v
		case *exception.CommonException:
			result.Common = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update: "+err2.Error())
			oprot.WriteMessageBegin("update", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("update", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorRemove struct {
	handler UserService
}

func (p *userServiceProcessorRemove) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceRemoveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserServiceRemoveResult{}
	var err2 error
	if err2 = p.handler.Remove(args.ID); err2 != nil {
		switch v := err2.(type) {
		case *exception.UserNotFoundException:
			result.UserNotFound = v
		case *exception.ForbiddenException:
			result.Forbidden = v
		case *exception.CommonException:
			result.Common = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: "+err2.Error())
			oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("remove", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorGet struct {
	handler UserService
}

func (p *userServiceProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceGetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserServiceGetResult{}
	var retval *Identity
	var err2 error
	if retval, err2 = p.handler.Get(args.ID); err2 != nil {
		switch v := err2.(type) {
		case *exception.UserNotFoundException:
			result.UserNotFound = v
		case *exception.ForbiddenException:
			result.Forbidden = v
		case *exception.CommonException:
			result.Common = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err2.Error())
			oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorGetAll struct {
	handler UserService
}

func (p *userServiceProcessorGetAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceGetAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserServiceGetAllResult{}
	var retval []*Identity
	var err2 error
	if retval, err2 = p.handler.GetAll(); err2 != nil {
		switch v := err2.(type) {
		case *exception.ForbiddenException:
			result.Forbidden = v
		case *exception.CommonException:
			result.Common = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAll: "+err2.Error())
			oprot.WriteMessageBegin("getAll", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type UserServicePingArgs struct {
}

func NewUserServicePingArgs() *UserServicePingArgs {
	return &UserServicePingArgs{}
}

func (p *UserServicePingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServicePingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServicePingResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewUserServicePingResult() *UserServicePingResult {
	return &UserServicePingResult{}
}

var UserServicePingResult_Success_DEFAULT string

func (p *UserServicePingResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserServicePingResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserServicePingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServicePingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServicePingResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserServicePingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServicePingResult(%+v)", *p)
}

// Attributes:
//  - Identity
type UserServiceCreateArgs struct {
	Identity *Identity `thrift:"identity,1,required" json:"identity"`
}

func NewUserServiceCreateArgs() *UserServiceCreateArgs {
	return &UserServiceCreateArgs{}
}

var UserServiceCreateArgs_Identity_DEFAULT *Identity

func (p *UserServiceCreateArgs) GetIdentity() *Identity {
	if !p.IsSetIdentity() {
		return UserServiceCreateArgs_Identity_DEFAULT
	}
	return p.Identity
}
func (p *UserServiceCreateArgs) IsSetIdentity() bool {
	return p.Identity != nil
}

func (p *UserServiceCreateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIdentity bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetIdentity = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIdentity {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Identity is not set"))
	}
	return nil
}

func (p *UserServiceCreateArgs) readField1(iprot thrift.TProtocol) error {
	p.Identity = &Identity{}
	if err := p.Identity.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Identity), err)
	}
	return nil
}

func (p *UserServiceCreateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceCreateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identity", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:identity: ", p), err)
	}
	if err := p.Identity.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Identity), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:identity: ", p), err)
	}
	return err
}

func (p *UserServiceCreateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AlreadyRegister
//  - Forbidden
//  - Validation
//  - Common
type UserServiceCreateResult struct {
	Success         *Identity                               `thrift:"success,0" json:"success,omitempty"`
	AlreadyRegister *exception.UserAlreadyRegisterException `thrift:"alreadyRegister,1" json:"alreadyRegister,omitempty"`
	Forbidden       *exception.ForbiddenException           `thrift:"forbidden,2" json:"forbidden,omitempty"`
	Validation      *exception.ValidationException          `thrift:"validation,3" json:"validation,omitempty"`
	Common          *exception.CommonException              `thrift:"common,4" json:"common,omitempty"`
}

func NewUserServiceCreateResult() *UserServiceCreateResult {
	return &UserServiceCreateResult{}
}

var UserServiceCreateResult_Success_DEFAULT *Identity

func (p *UserServiceCreateResult) GetSuccess() *Identity {
	if !p.IsSetSuccess() {
		return UserServiceCreateResult_Success_DEFAULT
	}
	return p.Success
}

var UserServiceCreateResult_AlreadyRegister_DEFAULT *exception.UserAlreadyRegisterException

func (p *UserServiceCreateResult) GetAlreadyRegister() *exception.UserAlreadyRegisterException {
	if !p.IsSetAlreadyRegister() {
		return UserServiceCreateResult_AlreadyRegister_DEFAULT
	}
	return p.AlreadyRegister
}

var UserServiceCreateResult_Forbidden_DEFAULT *exception.ForbiddenException

func (p *UserServiceCreateResult) GetForbidden() *exception.ForbiddenException {
	if !p.IsSetForbidden() {
		return UserServiceCreateResult_Forbidden_DEFAULT
	}
	return p.Forbidden
}

var UserServiceCreateResult_Validation_DEFAULT *exception.ValidationException

func (p *UserServiceCreateResult) GetValidation() *exception.ValidationException {
	if !p.IsSetValidation() {
		return UserServiceCreateResult_Validation_DEFAULT
	}
	return p.Validation
}

var UserServiceCreateResult_Common_DEFAULT *exception.CommonException

func (p *UserServiceCreateResult) GetCommon() *exception.CommonException {
	if !p.IsSetCommon() {
		return UserServiceCreateResult_Common_DEFAULT
	}
	return p.Common
}
func (p *UserServiceCreateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceCreateResult) IsSetAlreadyRegister() bool {
	return p.AlreadyRegister != nil
}

func (p *UserServiceCreateResult) IsSetForbidden() bool {
	return p.Forbidden != nil
}

func (p *UserServiceCreateResult) IsSetValidation() bool {
	return p.Validation != nil
}

func (p *UserServiceCreateResult) IsSetCommon() bool {
	return p.Common != nil
}

func (p *UserServiceCreateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceCreateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Identity{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceCreateResult) readField1(iprot thrift.TProtocol) error {
	p.AlreadyRegister = &exception.UserAlreadyRegisterException{}
	if err := p.AlreadyRegister.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AlreadyRegister), err)
	}
	return nil
}

func (p *UserServiceCreateResult) readField2(iprot thrift.TProtocol) error {
	p.Forbidden = &exception.ForbiddenException{}
	if err := p.Forbidden.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Forbidden), err)
	}
	return nil
}

func (p *UserServiceCreateResult) readField3(iprot thrift.TProtocol) error {
	p.Validation = &exception.ValidationException{}
	if err := p.Validation.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Validation), err)
	}
	return nil
}

func (p *UserServiceCreateResult) readField4(iprot thrift.TProtocol) error {
	p.Common = &exception.CommonException{}
	if err := p.Common.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
	}
	return nil
}

func (p *UserServiceCreateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceCreateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceCreateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlreadyRegister() {
		if err := oprot.WriteFieldBegin("alreadyRegister", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alreadyRegister: ", p), err)
		}
		if err := p.AlreadyRegister.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AlreadyRegister), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alreadyRegister: ", p), err)
		}
	}
	return err
}

func (p *UserServiceCreateResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetForbidden() {
		if err := oprot.WriteFieldBegin("forbidden", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:forbidden: ", p), err)
		}
		if err := p.Forbidden.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Forbidden), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:forbidden: ", p), err)
		}
	}
	return err
}

func (p *UserServiceCreateResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValidation() {
		if err := oprot.WriteFieldBegin("validation", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:validation: ", p), err)
		}
		if err := p.Validation.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Validation), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:validation: ", p), err)
		}
	}
	return err
}

func (p *UserServiceCreateResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommon() {
		if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:common: ", p), err)
		}
		if err := p.Common.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:common: ", p), err)
		}
	}
	return err
}

func (p *UserServiceCreateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Identity
type UserServiceUpdateArgs struct {
	ID       UUID      `thrift:"id,1,required" json:"id"`
	Identity *Identity `thrift:"identity,2,required" json:"identity"`
}

func NewUserServiceUpdateArgs() *UserServiceUpdateArgs {
	return &UserServiceUpdateArgs{}
}

func (p *UserServiceUpdateArgs) GetID() UUID {
	return p.ID
}

var UserServiceUpdateArgs_Identity_DEFAULT *Identity

func (p *UserServiceUpdateArgs) GetIdentity() *Identity {
	if !p.IsSetIdentity() {
		return UserServiceUpdateArgs_Identity_DEFAULT
	}
	return p.Identity
}
func (p *UserServiceUpdateArgs) IsSetIdentity() bool {
	return p.Identity != nil
}

func (p *UserServiceUpdateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetIdentity bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetIdentity = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetIdentity {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Identity is not set"))
	}
	return nil
}

func (p *UserServiceUpdateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := UUID(v)
		p.ID = temp
	}
	return nil
}

func (p *UserServiceUpdateArgs) readField2(iprot thrift.TProtocol) error {
	p.Identity = &Identity{}
	if err := p.Identity.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Identity), err)
	}
	return nil
}

func (p *UserServiceUpdateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserServiceUpdateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identity", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identity: ", p), err)
	}
	if err := p.Identity.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Identity), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identity: ", p), err)
	}
	return err
}

func (p *UserServiceUpdateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserNotFound
//  - Forbidden
//  - Validation
//  - Common
type UserServiceUpdateResult struct {
	Success      *Identity                        `thrift:"success,0" json:"success,omitempty"`
	UserNotFound *exception.UserNotFoundException `thrift:"userNotFound,1" json:"userNotFound,omitempty"`
	Forbidden    *exception.ForbiddenException    `thrift:"forbidden,2" json:"forbidden,omitempty"`
	Validation   *exception.ValidationException   `thrift:"validation,3" json:"validation,omitempty"`
	Common       *exception.CommonException       `thrift:"common,4" json:"common,omitempty"`
}

func NewUserServiceUpdateResult() *UserServiceUpdateResult {
	return &UserServiceUpdateResult{}
}

var UserServiceUpdateResult_Success_DEFAULT *Identity

func (p *UserServiceUpdateResult) GetSuccess() *Identity {
	if !p.IsSetSuccess() {
		return UserServiceUpdateResult_Success_DEFAULT
	}
	return p.Success
}

var UserServiceUpdateResult_UserNotFound_DEFAULT *exception.UserNotFoundException

func (p *UserServiceUpdateResult) GetUserNotFound() *exception.UserNotFoundException {
	if !p.IsSetUserNotFound() {
		return UserServiceUpdateResult_UserNotFound_DEFAULT
	}
	return p.UserNotFound
}

var UserServiceUpdateResult_Forbidden_DEFAULT *exception.ForbiddenException

func (p *UserServiceUpdateResult) GetForbidden() *exception.ForbiddenException {
	if !p.IsSetForbidden() {
		return UserServiceUpdateResult_Forbidden_DEFAULT
	}
	return p.Forbidden
}

var UserServiceUpdateResult_Validation_DEFAULT *exception.ValidationException

func (p *UserServiceUpdateResult) GetValidation() *exception.ValidationException {
	if !p.IsSetValidation() {
		return UserServiceUpdateResult_Validation_DEFAULT
	}
	return p.Validation
}

var UserServiceUpdateResult_Common_DEFAULT *exception.CommonException

func (p *UserServiceUpdateResult) GetCommon() *exception.CommonException {
	if !p.IsSetCommon() {
		return UserServiceUpdateResult_Common_DEFAULT
	}
	return p.Common
}
func (p *UserServiceUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateResult) IsSetUserNotFound() bool {
	return p.UserNotFound != nil
}

func (p *UserServiceUpdateResult) IsSetForbidden() bool {
	return p.Forbidden != nil
}

func (p *UserServiceUpdateResult) IsSetValidation() bool {
	return p.Validation != nil
}

func (p *UserServiceUpdateResult) IsSetCommon() bool {
	return p.Common != nil
}

func (p *UserServiceUpdateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Identity{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUpdateResult) readField1(iprot thrift.TProtocol) error {
	p.UserNotFound = &exception.UserNotFoundException{}
	if err := p.UserNotFound.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserNotFound), err)
	}
	return nil
}

func (p *UserServiceUpdateResult) readField2(iprot thrift.TProtocol) error {
	p.Forbidden = &exception.ForbiddenException{}
	if err := p.Forbidden.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Forbidden), err)
	}
	return nil
}

func (p *UserServiceUpdateResult) readField3(iprot thrift.TProtocol) error {
	p.Validation = &exception.ValidationException{}
	if err := p.Validation.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Validation), err)
	}
	return nil
}

func (p *UserServiceUpdateResult) readField4(iprot thrift.TProtocol) error {
	p.Common = &exception.CommonException{}
	if err := p.Common.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
	}
	return nil
}

func (p *UserServiceUpdateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserNotFound() {
		if err := oprot.WriteFieldBegin("userNotFound", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userNotFound: ", p), err)
		}
		if err := p.UserNotFound.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserNotFound), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userNotFound: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetForbidden() {
		if err := oprot.WriteFieldBegin("forbidden", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:forbidden: ", p), err)
		}
		if err := p.Forbidden.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Forbidden), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:forbidden: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValidation() {
		if err := oprot.WriteFieldBegin("validation", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:validation: ", p), err)
		}
		if err := p.Validation.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Validation), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:validation: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommon() {
		if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:common: ", p), err)
		}
		if err := p.Common.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:common: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateResult(%+v)", *p)
}

// Attributes:
//  - ID
type UserServiceRemoveArgs struct {
	ID UUID `thrift:"id,1,required" json:"id"`
}

func NewUserServiceRemoveArgs() *UserServiceRemoveArgs {
	return &UserServiceRemoveArgs{}
}

func (p *UserServiceRemoveArgs) GetID() UUID {
	return p.ID
}
func (p *UserServiceRemoveArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *UserServiceRemoveArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := UUID(v)
		p.ID = temp
	}
	return nil
}

func (p *UserServiceRemoveArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remove_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceRemoveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserServiceRemoveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRemoveArgs(%+v)", *p)
}

// Attributes:
//  - UserNotFound
//  - Forbidden
//  - Common
type UserServiceRemoveResult struct {
	UserNotFound *exception.UserNotFoundException `thrift:"userNotFound,1" json:"userNotFound,omitempty"`
	Forbidden    *exception.ForbiddenException    `thrift:"forbidden,2" json:"forbidden,omitempty"`
	Common       *exception.CommonException       `thrift:"common,3" json:"common,omitempty"`
}

func NewUserServiceRemoveResult() *UserServiceRemoveResult {
	return &UserServiceRemoveResult{}
}

var UserServiceRemoveResult_UserNotFound_DEFAULT *exception.UserNotFoundException

func (p *UserServiceRemoveResult) GetUserNotFound() *exception.UserNotFoundException {
	if !p.IsSetUserNotFound() {
		return UserServiceRemoveResult_UserNotFound_DEFAULT
	}
	return p.UserNotFound
}

var UserServiceRemoveResult_Forbidden_DEFAULT *exception.ForbiddenException

func (p *UserServiceRemoveResult) GetForbidden() *exception.ForbiddenException {
	if !p.IsSetForbidden() {
		return UserServiceRemoveResult_Forbidden_DEFAULT
	}
	return p.Forbidden
}

var UserServiceRemoveResult_Common_DEFAULT *exception.CommonException

func (p *UserServiceRemoveResult) GetCommon() *exception.CommonException {
	if !p.IsSetCommon() {
		return UserServiceRemoveResult_Common_DEFAULT
	}
	return p.Common
}
func (p *UserServiceRemoveResult) IsSetUserNotFound() bool {
	return p.UserNotFound != nil
}

func (p *UserServiceRemoveResult) IsSetForbidden() bool {
	return p.Forbidden != nil
}

func (p *UserServiceRemoveResult) IsSetCommon() bool {
	return p.Common != nil
}

func (p *UserServiceRemoveResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceRemoveResult) readField1(iprot thrift.TProtocol) error {
	p.UserNotFound = &exception.UserNotFoundException{}
	if err := p.UserNotFound.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserNotFound), err)
	}
	return nil
}

func (p *UserServiceRemoveResult) readField2(iprot thrift.TProtocol) error {
	p.Forbidden = &exception.ForbiddenException{}
	if err := p.Forbidden.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Forbidden), err)
	}
	return nil
}

func (p *UserServiceRemoveResult) readField3(iprot thrift.TProtocol) error {
	p.Common = &exception.CommonException{}
	if err := p.Common.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
	}
	return nil
}

func (p *UserServiceRemoveResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remove_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceRemoveResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserNotFound() {
		if err := oprot.WriteFieldBegin("userNotFound", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userNotFound: ", p), err)
		}
		if err := p.UserNotFound.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserNotFound), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userNotFound: ", p), err)
		}
	}
	return err
}

func (p *UserServiceRemoveResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetForbidden() {
		if err := oprot.WriteFieldBegin("forbidden", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:forbidden: ", p), err)
		}
		if err := p.Forbidden.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Forbidden), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:forbidden: ", p), err)
		}
	}
	return err
}

func (p *UserServiceRemoveResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommon() {
		if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:common: ", p), err)
		}
		if err := p.Common.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:common: ", p), err)
		}
	}
	return err
}

func (p *UserServiceRemoveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRemoveResult(%+v)", *p)
}

// Attributes:
//  - ID
type UserServiceGetArgs struct {
	ID UUID `thrift:"id,1,required" json:"id"`
}

func NewUserServiceGetArgs() *UserServiceGetArgs {
	return &UserServiceGetArgs{}
}

func (p *UserServiceGetArgs) GetID() UUID {
	return p.ID
}
func (p *UserServiceGetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *UserServiceGetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := UUID(v)
		p.ID = temp
	}
	return nil
}

func (p *UserServiceGetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserServiceGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserNotFound
//  - Forbidden
//  - Common
type UserServiceGetResult struct {
	Success      *Identity                        `thrift:"success,0" json:"success,omitempty"`
	UserNotFound *exception.UserNotFoundException `thrift:"userNotFound,1" json:"userNotFound,omitempty"`
	Forbidden    *exception.ForbiddenException    `thrift:"forbidden,2" json:"forbidden,omitempty"`
	Common       *exception.CommonException       `thrift:"common,3" json:"common,omitempty"`
}

func NewUserServiceGetResult() *UserServiceGetResult {
	return &UserServiceGetResult{}
}

var UserServiceGetResult_Success_DEFAULT *Identity

func (p *UserServiceGetResult) GetSuccess() *Identity {
	if !p.IsSetSuccess() {
		return UserServiceGetResult_Success_DEFAULT
	}
	return p.Success
}

var UserServiceGetResult_UserNotFound_DEFAULT *exception.UserNotFoundException

func (p *UserServiceGetResult) GetUserNotFound() *exception.UserNotFoundException {
	if !p.IsSetUserNotFound() {
		return UserServiceGetResult_UserNotFound_DEFAULT
	}
	return p.UserNotFound
}

var UserServiceGetResult_Forbidden_DEFAULT *exception.ForbiddenException

func (p *UserServiceGetResult) GetForbidden() *exception.ForbiddenException {
	if !p.IsSetForbidden() {
		return UserServiceGetResult_Forbidden_DEFAULT
	}
	return p.Forbidden
}

var UserServiceGetResult_Common_DEFAULT *exception.CommonException

func (p *UserServiceGetResult) GetCommon() *exception.CommonException {
	if !p.IsSetCommon() {
		return UserServiceGetResult_Common_DEFAULT
	}
	return p.Common
}
func (p *UserServiceGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetResult) IsSetUserNotFound() bool {
	return p.UserNotFound != nil
}

func (p *UserServiceGetResult) IsSetForbidden() bool {
	return p.Forbidden != nil
}

func (p *UserServiceGetResult) IsSetCommon() bool {
	return p.Common != nil
}

func (p *UserServiceGetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceGetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Identity{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceGetResult) readField1(iprot thrift.TProtocol) error {
	p.UserNotFound = &exception.UserNotFoundException{}
	if err := p.UserNotFound.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserNotFound), err)
	}
	return nil
}

func (p *UserServiceGetResult) readField2(iprot thrift.TProtocol) error {
	p.Forbidden = &exception.ForbiddenException{}
	if err := p.Forbidden.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Forbidden), err)
	}
	return nil
}

func (p *UserServiceGetResult) readField3(iprot thrift.TProtocol) error {
	p.Common = &exception.CommonException{}
	if err := p.Common.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
	}
	return nil
}

func (p *UserServiceGetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceGetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserNotFound() {
		if err := oprot.WriteFieldBegin("userNotFound", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userNotFound: ", p), err)
		}
		if err := p.UserNotFound.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserNotFound), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userNotFound: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetForbidden() {
		if err := oprot.WriteFieldBegin("forbidden", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:forbidden: ", p), err)
		}
		if err := p.Forbidden.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Forbidden), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:forbidden: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommon() {
		if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:common: ", p), err)
		}
		if err := p.Common.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:common: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetResult(%+v)", *p)
}

type UserServiceGetAllArgs struct {
}

func NewUserServiceGetAllArgs() *UserServiceGetAllArgs {
	return &UserServiceGetAllArgs{}
}

func (p *UserServiceGetAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceGetAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAll_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceGetAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Forbidden
//  - Common
type UserServiceGetAllResult struct {
	Success   []*Identity                   `thrift:"success,0" json:"success,omitempty"`
	Forbidden *exception.ForbiddenException `thrift:"forbidden,1" json:"forbidden,omitempty"`
	Common    *exception.CommonException    `thrift:"common,2" json:"common,omitempty"`
}

func NewUserServiceGetAllResult() *UserServiceGetAllResult {
	return &UserServiceGetAllResult{}
}

var UserServiceGetAllResult_Success_DEFAULT []*Identity

func (p *UserServiceGetAllResult) GetSuccess() []*Identity {
	return p.Success
}

var UserServiceGetAllResult_Forbidden_DEFAULT *exception.ForbiddenException

func (p *UserServiceGetAllResult) GetForbidden() *exception.ForbiddenException {
	if !p.IsSetForbidden() {
		return UserServiceGetAllResult_Forbidden_DEFAULT
	}
	return p.Forbidden
}

var UserServiceGetAllResult_Common_DEFAULT *exception.CommonException

func (p *UserServiceGetAllResult) GetCommon() *exception.CommonException {
	if !p.IsSetCommon() {
		return UserServiceGetAllResult_Common_DEFAULT
	}
	return p.Common
}
func (p *UserServiceGetAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetAllResult) IsSetForbidden() bool {
	return p.Forbidden != nil
}

func (p *UserServiceGetAllResult) IsSetCommon() bool {
	return p.Common != nil
}

func (p *UserServiceGetAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceGetAllResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Identity, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &Identity{}
		if err := _elem14.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
		}
		p.Success = append(p.Success, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserServiceGetAllResult) readField1(iprot thrift.TProtocol) error {
	p.Forbidden = &exception.ForbiddenException{}
	if err := p.Forbidden.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Forbidden), err)
	}
	return nil
}

func (p *UserServiceGetAllResult) readField2(iprot thrift.TProtocol) error {
	p.Common = &exception.CommonException{}
	if err := p.Common.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
	}
	return nil
}

func (p *UserServiceGetAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAll_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceGetAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetForbidden() {
		if err := oprot.WriteFieldBegin("forbidden", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:forbidden: ", p), err)
		}
		if err := p.Forbidden.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Forbidden), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:forbidden: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetAllResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommon() {
		if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:common: ", p), err)
		}
		if err := p.Common.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:common: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetAllResult(%+v)", *p)
}
